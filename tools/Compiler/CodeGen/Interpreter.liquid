using System;
using System.Threading.Tasks;
using LanguageExt;
using Newtonsoft.Json;

namespace Infusio.Http
{
    using static Prelude;
    using static Formatting;
    using static JsonConvert;

    public static class HttpSupport
    {
        public static Task<Either<InfusioError, InfusioResult<T>>> interpret<T>(InfusioOp<T> op, InfusioClient client) =>
            RunWith(op, InfusioState.Create(InfusioLogging.WithoutLogs), client);

        public static Task<Either<InfusioError, InfusioResult<T>>> RunWith<T>(this InfusioOp<T> op, InfusioClient client) =>
            RunWith(op, InfusioState.Create(InfusioLogging.WithoutLogs), client);

        public static Task<Either<InfusioError, InfusioResult<T>>> interpret<T>(InfusioOp<T> op, InfusioState state, InfusioClient client) =>
            RunAsync(op, state, client).ToEither();

        public static Task<Either<InfusioError, InfusioResult<T>>> RunWith<T>(this InfusioOp<T> op, InfusioState state, InfusioClient client) =>
            RunAsync(op, state, client).ToEither();

        static EitherAsync<InfusioError, InfusioResult<T>> RunAsync<T>(InfusioOp<T> op, InfusioState state, InfusioClient client) =>
            op is InfusioOp<T>.Return r ? Right<InfusioError, InfusioResult<T>>(new InfusioResult<T>(r.Value, state.Logs)).ToAsync() :
            op is InfusioOp<T>.Log l ? Exe(null, () => Right<InfusioError, Unit>(unit).AsTask(), l.Next, state, client) :
{% for op in Operations -%}
            op is InfusioOp<T>.{{ op.Name }}{% assign op_name = forloop.index %} _{{ op_name }} ? Exe(op.ToString(), () => client.{{ op.Name }}({% for p in op.Parameters -%}_{{ op_name }}.{{ p.Name | capitalize }}{% if forloop.last == false %}, {% endif %}{% endfor %}), _{{ op_name }}.Next, state, client) :
{% endfor -%}
            throw new NotSupportedException();

        static EitherAsync<InfusioError, InfusioResult<B>> Exe<T, B>(Option<string> describe, Func<Task<Either<InfusioError, T>>> fn, Func<T, InfusioOp<B>> nextOp, InfusioState state, InfusioClient client) =>
            from right in LogOperation(describe, state, fn).ToAsync()
            from next in RunAsync(nextOp(right.Value), right.State, client)
            select next;

        static Task<Either<InfusioError, (InfusioState State, T Value)>> LogOperation<T>(Option<string> describe, InfusioState state, Func<Task<Either<InfusioError, T>>> fn) =>
            from st in Right<InfusioError, (InfusioState, Unit)>((LogRequest(state, describe), unit)).AsTask()
            from result in fn().ToAsync().Match(
                Left: error => Left<InfusioError, (InfusioState, T)>(error),
                Right: value => Right<InfusioError, (InfusioState, T)>((LogResult(st.Item1, value), value))
            )
            select result;

        static InfusioState LogRequest(InfusioState state, Option<string> describe) =>
            describe.Fold(state, (fstate, msg) => fstate.UseLogging ? fstate.Log(msg) : fstate);

        static InfusioState LogResult<T>(InfusioState state, T value) =>
            typeof(T) == typeof(Unit) ? state : 
            state.UseLogging ? state.Log($"OK: {SerializeObject(value, Indented)}") :
            state;
    }

    public enum InfusioLogging
    {
        WithLogs,
        WithoutLogs
    }

    public class InfusioState
    {
        public static InfusioState Create(InfusioLogging logging) => new InfusioState(Seq<string>(), logging == InfusioLogging.WithLogs ? true : false);
        public static InfusioState Create(Seq<string> logs, InfusioLogging logging) => new InfusioState(logs, logging == InfusioLogging.WithLogs ? true : false);
        public readonly Seq<string> Logs;
        public readonly bool UseLogging;

        InfusioState(Seq<string> logs = default, bool useLogging = default)
        {
            Logs = logs;
            UseLogging = useLogging;
        }

        public InfusioState Log(string message) =>
            new InfusioState(Logs.Append(Seq1(message)), UseLogging);
    }
}