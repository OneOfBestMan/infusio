//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.17.2.0 (NJsonSchema v9.10.45.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
using System;
using System.Net.Http;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;
using LanguageExt;
using Newtonsoft.Json;
using Infusionsoft.Client;

// ReSharper disable InconsistentNaming

namespace Infusionsoft
{
    using static Prelude;
    using static JsonConvert;
    
    public class InfusionDslError : NewType<InfusionDslError, string>
    {
        public InfusionDslError(string value) : base(value) { }
        public InfusionDslError(SerializationInfo info, StreamingContext context) : base(info, context) { }
    }
        
    public static class InfusionDsl
    {
        internal static InfusionOp<A> Return<A>(A value) =>
            new InfusionOp<A>.Return(value);  
        
        internal static InfusionOp<Unit> ReturnUnit() =>
            new InfusionOp<Unit>.Return(unit);            
        
        public static InfusionOp<AccountProfile> GetAccountProfile() =>
            new InfusionOp<AccountProfile>.GetAccountProfile(Return);
        
        public static InfusionOp<AccountProfile> UpdateAccountInfo(AccountProfile accountInfo) =>
            new InfusionOp<AccountProfile>.UpdateAccountInfo(Return, accountInfo);
        
        public static InfusionOp<AffiliateCommissionList> SearchCommissions(string since, string until, int? limit, int? offset, long? affiliateId) =>
            new InfusionOp<AffiliateCommissionList>.SearchCommissions(Return, since, until, limit, offset, affiliateId);
        
        public static InfusionOp<ObjectModel> RetrieveAffiliateModel() =>
            new InfusionOp<ObjectModel>.RetrieveAffiliateModel(Return);
        
        public static InfusionOp<AppointmentList> ListAppointments(string since, string until, int? limit, int? offset, long? contact_id) =>
            new InfusionOp<AppointmentList>.ListAppointments(Return, since, until, limit, offset, contact_id);
        
        public static InfusionOp<Appointment> CreateAppointment(Appointment appointment) =>
            new InfusionOp<Appointment>.CreateAppointment(Return, appointment);
        
        public static InfusionOp<ObjectModel> RetrieveAppointmentModel() =>
            new InfusionOp<ObjectModel>.RetrieveAppointmentModel(Return);
        
        public static InfusionOp<Appointment> GetAppointment(long appointmentId) =>
            new InfusionOp<Appointment>.GetAppointment(Return, appointmentId);
        
        public static InfusionOp<Appointment> UpdateAppointment(long appointmentId, Appointment appointmentDTO) =>
            new InfusionOp<Appointment>.UpdateAppointment(Return, appointmentId, appointmentDTO);
        
        public static InfusionOp<Unit> DeleteAppointment(long appointmentId) =>
            new InfusionOp<Unit>.DeleteAppointment(ReturnUnit, appointmentId);
        
        public static InfusionOp<Appointment> UpdatePropertiesOnAppointment(long appointmentId, Appointment appointmentDTO) =>
            new InfusionOp<Appointment>.UpdatePropertiesOnAppointment(Return, appointmentId, appointmentDTO);
        
        public static InfusionOp<CampaignList> ListCampaigns(int? limit, int? offset, string search_text, Order2? order, Order_direction? order_direction) =>
            new InfusionOp<CampaignList>.ListCampaigns(Return, limit, offset, search_text, order, order_direction);
        
        public static InfusionOp<Campaign> GetCampaign(long campaignId, LanguageExt.Lst<string> optional_properties) =>
            new InfusionOp<Campaign>.GetCampaign(Return, campaignId, optional_properties);
        
        public static InfusionOp<Unit> AddContactsToCampaignSequence(long campaignId, long sequenceId, SetOfIds ids) =>
            new InfusionOp<Unit>.AddContactsToCampaignSequence(ReturnUnit, campaignId, sequenceId, ids);
        
        public static InfusionOp<Unit> RemoveContactsFromCampaignSequence(long campaignId, long sequenceId, SetOfIds ids) =>
            new InfusionOp<Unit>.RemoveContactsFromCampaignSequence(ReturnUnit, campaignId, sequenceId, ids);
        
        public static InfusionOp<Unit> AddContactToCampaignSequence(long campaignId, long sequenceId, long contactId) =>
            new InfusionOp<Unit>.AddContactToCampaignSequence(ReturnUnit, campaignId, sequenceId, contactId);
        
        public static InfusionOp<Unit> RemoveContactFromCampaignSequence(long campaignId, long sequenceId, long contactId) =>
            new InfusionOp<Unit>.RemoveContactFromCampaignSequence(ReturnUnit, campaignId, sequenceId, contactId);
        
        public static InfusionOp<CompanyList> ListCompanies(int? limit, int? offset, string company_name, Order3? order, Order_direction2? order_direction, LanguageExt.Lst<string> optional_properties) =>
            new InfusionOp<CompanyList>.ListCompanies(Return, limit, offset, company_name, order, order_direction, optional_properties);
        
        public static InfusionOp<Company> CreateCompany(CreateCompany company) =>
            new InfusionOp<Company>.CreateCompany(Return, company);
        
        public static InfusionOp<ObjectModel> RetrieveCompanyModel() =>
            new InfusionOp<ObjectModel>.RetrieveCompanyModel(Return);
        
        public static InfusionOp<ContactList> ListContacts(int? limit, int? offset, string email, string given_name, string family_name, Order4? order, Order_direction3? order_direction) =>
            new InfusionOp<ContactList>.ListContacts(Return, limit, offset, email, given_name, family_name, order, order_direction);
        
        public static InfusionOp<FullContact> CreateContact(RequestContact contact) =>
            new InfusionOp<FullContact>.CreateContact(Return, contact);
        
        public static InfusionOp<FullContact> CreateOrUpdateContact(UpsertContact contact) =>
            new InfusionOp<FullContact>.CreateOrUpdateContact(Return, contact);
        
        public static InfusionOp<ObjectModel> RetrieveContactModel() =>
            new InfusionOp<ObjectModel>.RetrieveContactModel(Return);
        
        public static InfusionOp<Unit> DeleteContact(long contactId) =>
            new InfusionOp<Unit>.DeleteContact(ReturnUnit, contactId);
        
        public static InfusionOp<FullContact> UpdatePropertiesOnContact(RequestContact contact, long contactId) =>
            new InfusionOp<FullContact>.UpdatePropertiesOnContact(Return, contact, contactId);
        
        public static InfusionOp<CreditCardAdded> CreateCreditCard(CreditCard creditCard, long contactId) =>
            new InfusionOp<CreditCardAdded>.CreateCreditCard(Return, creditCard, contactId);
        
        public static InfusionOp<EmailSentQueryResultList> ListEmailsForContact(long contactId, int? limit, int? offset, long? contact_id, string email) =>
            new InfusionOp<EmailSentQueryResultList>.ListEmailsForContact(Return, contactId, limit, offset, contact_id, email);
        
        public static InfusionOp<EmailSentCreate> CreateEmailForContact(long contactId, EmailSentCreate emailWithContent) =>
            new InfusionOp<EmailSentCreate>.CreateEmailForContact(Return, contactId, emailWithContent);
        
        public static InfusionOp<ContactTagList> ListAppliedTags(long contactId, int? limit, int? offset) =>
            new InfusionOp<ContactTagList>.ListAppliedTags(Return, contactId, limit, offset);
        
        public static InfusionOp<LanguageExt.Lst<Entry_longAndString_>> ApplyTagsToContactId(long contactId, TagId tagIds) =>
            new InfusionOp<LanguageExt.Lst<Entry_longAndString_>>.ApplyTagsToContactId(Return, contactId, tagIds);
        
        public static InfusionOp<Unit> RemoveTagsFromContact(long contactId, string ids) =>
            new InfusionOp<Unit>.RemoveTagsFromContact(ReturnUnit, contactId, ids);
        
        public static InfusionOp<FullContact> GetContact(long id, LanguageExt.Lst<string> optional_properties) =>
            new InfusionOp<FullContact>.GetContact(Return, id, optional_properties);
        
        public static InfusionOp<EmailSentQueryResultList> ListEmails(int? limit, int? offset, long? contact_id, string email) =>
            new InfusionOp<EmailSentQueryResultList>.ListEmails(Return, limit, offset, contact_id, email);
        
        public static InfusionOp<EmailSentCreate> CreateEmail(EmailSentCreate emailWithContent) =>
            new InfusionOp<EmailSentCreate>.CreateEmail(Return, emailWithContent);
        
        public static InfusionOp<EmailSentCreateList> CreateEmails(EmailSentCreateList emailWithContent) =>
            new InfusionOp<EmailSentCreateList>.CreateEmails(Return, emailWithContent);
        
        public static InfusionOp<LanguageExt.Map<string, string>> DeleteEmails(SetOfIds emailIds) =>
            new InfusionOp<LanguageExt.Map<string, string>>.DeleteEmails(Return, emailIds);
        
        public static InfusionOp<EmailSentQueryResultWithContent> GetEmail(long id) =>
            new InfusionOp<EmailSentQueryResultWithContent>.GetEmail(Return, id);
        
        public static InfusionOp<EmailSentCreate> UpdateEmail(EmailSentCreate emailWithContent, long id) =>
            new InfusionOp<EmailSentCreate>.UpdateEmail(Return, emailWithContent, id);
        
        public static InfusionOp<Unit> DeleteEmail(long id) =>
            new InfusionOp<Unit>.DeleteEmail(ReturnUnit, id);
        
        public static InfusionOp<FileList> ListFiles(int? limit, int? offset, Viewable? viewable, Permission? permission, Infusionsoft.Client.Type? type, string name) =>
            new InfusionOp<FileList>.ListFiles(Return, limit, offset, viewable, permission, type, name);
        
        public static InfusionOp<FileInformation> CreateFile(FileUpload fileUpload) =>
            new InfusionOp<FileInformation>.CreateFile(Return, fileUpload);
        
        public static InfusionOp<FileInformation> GetFile(long fileId, LanguageExt.Lst<string> optional_properties) =>
            new InfusionOp<FileInformation>.GetFile(Return, fileId, optional_properties);
        
        public static InfusionOp<FileInformation> UpdateFile(long fileId, FileUpload fileUpload) =>
            new InfusionOp<FileInformation>.UpdateFile(Return, fileId, fileUpload);
        
        public static InfusionOp<Unit> DeleteFile(long fileId) =>
            new InfusionOp<Unit>.DeleteFile(ReturnUnit, fileId);
        
        public static InfusionOp<LanguageExt.Lst<RestHook>> List_stored_hook_subscriptions() =>
            new InfusionOp<LanguageExt.Lst<RestHook>>.List_stored_hook_subscriptions(Return);
        
        public static InfusionOp<RestHook> Create_a_hook_subscription(RestHookRequest restHookRequest) =>
            new InfusionOp<RestHook>.Create_a_hook_subscription(Return, restHookRequest);
        
        public static InfusionOp<LanguageExt.Lst<string>> List_hook_event_types() =>
            new InfusionOp<LanguageExt.Lst<string>>.List_hook_event_types(Return);
        
        public static InfusionOp<RestHook> Retrieve_a_hook_subscription(string key) =>
            new InfusionOp<RestHook>.Retrieve_a_hook_subscription(Return, key);
        
        public static InfusionOp<RestHook> Update_a_hook_subscription(string key, RestHookRequest restHookRequest) =>
            new InfusionOp<RestHook>.Update_a_hook_subscription(Return, key, restHookRequest);
        
        public static InfusionOp<Unit> Delete_a_hook_subscription(string key) =>
            new InfusionOp<Unit>.Delete_a_hook_subscription(ReturnUnit, key);
        
        public static InfusionOp<RestHook> Verify_a_hook_subscription_delayed(string key, string x_Hook_Secret) =>
            new InfusionOp<RestHook>.Verify_a_hook_subscription_delayed(Return, key, x_Hook_Secret);
        
        public static InfusionOp<RestHook> Verify_a_hook_subscription(string key) =>
            new InfusionOp<RestHook>.Verify_a_hook_subscription(Return, key);
        
        public static InfusionOp<UserInfoDTO> GetUserInfo() =>
            new InfusionOp<UserInfoDTO>.GetUserInfo(Return);
        
        public static InfusionOp<OpportunityList> ListOpportunities(int? limit, int? offset, long? user_id, long? stage_id, string search_term, Order5? order) =>
            new InfusionOp<OpportunityList>.ListOpportunities(Return, limit, offset, user_id, stage_id, search_term, order);
        
        public static InfusionOp<Opportunity> CreateOpportunity(Opportunity opportunity) =>
            new InfusionOp<Opportunity>.CreateOpportunity(Return, opportunity);
        
        public static InfusionOp<Opportunity> UpdateOpportunity(Opportunity opportunity) =>
            new InfusionOp<Opportunity>.UpdateOpportunity(Return, opportunity);
        
        public static InfusionOp<ObjectModel> RetrieveOpportunityModel() =>
            new InfusionOp<ObjectModel>.RetrieveOpportunityModel(Return);
        
        public static InfusionOp<Opportunity> GetOpportunity(long opportunityId, LanguageExt.Lst<string> optional_properties) =>
            new InfusionOp<Opportunity>.GetOpportunity(Return, opportunityId, optional_properties);
        
        public static InfusionOp<Opportunity> UpdatePropertiesOnOpportunity(long opportunityId, Opportunity opportunity) =>
            new InfusionOp<Opportunity>.UpdatePropertiesOnOpportunity(Return, opportunityId, opportunity);
        
        public static InfusionOp<LanguageExt.Lst<SalesPipeline>> ListOpportunityStagePipelines() =>
            new InfusionOp<LanguageExt.Lst<SalesPipeline>>.ListOpportunityStagePipelines(Return);
        
        public static InfusionOp<OrderList> ListOrders(string since, string until, int? limit, int? offset, bool? paid, string order, long? contact_id, long? product_id) =>
            new InfusionOp<OrderList>.ListOrders(Return, since, until, limit, offset, paid, order, contact_id, product_id);
        
        public static InfusionOp<ObjectModel> RetrieveOrderModel() =>
            new InfusionOp<ObjectModel>.RetrieveOrderModel(Return);
        
        public static InfusionOp<Order> GetOrder(long orderId) =>
            new InfusionOp<Order>.GetOrder(Return, orderId);
        
        public static InfusionOp<TransactionList> ListTransactionsForOrder(long orderId, string since, string until, int? limit, int? offset, long? contact_id) =>
            new InfusionOp<TransactionList>.ListTransactionsForOrder(Return, orderId, since, until, limit, offset, contact_id);
        
        public static InfusionOp<ProductList> ListProducts(int? limit, int? offset, bool? active) =>
            new InfusionOp<ProductList>.ListProducts(Return, limit, offset, active);
        
        public static InfusionOp<ProductStatusList> ListProductsFromSyncToken(string sync_token, int? limit, int? offset) =>
            new InfusionOp<ProductStatusList>.ListProductsFromSyncToken(Return, sync_token, limit, offset);
        
        public static InfusionOp<Product> GetProduct(long productId) =>
            new InfusionOp<Product>.GetProduct(Return, productId);
        
        public static InfusionOp<Setting> GetApplicationEnabled() =>
            new InfusionOp<Setting>.GetApplicationEnabled(Return);
        
        public static InfusionOp<Setting> GetContactOptionTypes() =>
            new InfusionOp<Setting>.GetContactOptionTypes(Return);
        
        public static InfusionOp<ObjectModel> RetrieveSubscriptionModel() =>
            new InfusionOp<ObjectModel>.RetrieveSubscriptionModel(Return);
        
        public static InfusionOp<Tags> ListTags(int? limit, int? offset, long? category) =>
            new InfusionOp<Tags>.ListTags(Return, limit, offset, category);
        
        public static InfusionOp<Tag> CreateTag(CreateTag tag) =>
            new InfusionOp<Tag>.CreateTag(Return, tag);
        
        public static InfusionOp<TagCategory> CreateTagCategory(CreateTagCategory tagCategory) =>
            new InfusionOp<TagCategory>.CreateTagCategory(Return, tagCategory);
        
        public static InfusionOp<Tag> GetTag(long id) =>
            new InfusionOp<Tag>.GetTag(Return, id);
        
        public static InfusionOp<TaggedContactList> ListContactsForTagId(long tagId, int? limit, int? offset) =>
            new InfusionOp<TaggedContactList>.ListContactsForTagId(Return, tagId, limit, offset);
        
        public static InfusionOp<LanguageExt.Lst<Entry_longAndString_>> ApplyTagToContactIds(long tagId, SetOfIds ids) =>
            new InfusionOp<LanguageExt.Lst<Entry_longAndString_>>.ApplyTagToContactIds(Return, tagId, ids);
        
        public static InfusionOp<Unit> RemoveTagFromContactIds(long tagId, LanguageExt.Lst<long> ids) =>
            new InfusionOp<Unit>.RemoveTagFromContactIds(ReturnUnit, tagId, ids);
        
        public static InfusionOp<Unit> RemoveTagFromContactId(long tagId, long contactId) =>
            new InfusionOp<Unit>.RemoveTagFromContactId(ReturnUnit, tagId, contactId);
        
        public static InfusionOp<TaskList> ListTasks(long? contact_id, bool? has_due_date, long? user_id, string since, string until, bool? completed, int? limit, int? offset, string order) =>
            new InfusionOp<TaskList>.ListTasks(Return, contact_id, has_due_date, user_id, since, until, completed, limit, offset, order);
        
        public static InfusionOp<Infusionsoft.Client.Task> CreateTask(Infusionsoft.Client.Task task) =>
            new InfusionOp<Infusionsoft.Client.Task>.CreateTask(Return, task);
        
        public static InfusionOp<ObjectModel> RetrieveTaskModel() =>
            new InfusionOp<ObjectModel>.RetrieveTaskModel(Return);
        
        public static InfusionOp<TaskList> ListTasksForCurrentUser(long? contact_id, bool? has_due_date, long? user_id, string since, string until, bool? completed, int? limit, int? offset, string order) =>
            new InfusionOp<TaskList>.ListTasksForCurrentUser(Return, contact_id, has_due_date, user_id, since, until, completed, limit, offset, order);
        
        public static InfusionOp<Infusionsoft.Client.Task> GetTask(string taskId) =>
            new InfusionOp<Infusionsoft.Client.Task>.GetTask(Return, taskId);
        
        public static InfusionOp<Infusionsoft.Client.Task> UpdateTask(string taskId, Infusionsoft.Client.Task task) =>
            new InfusionOp<Infusionsoft.Client.Task>.UpdateTask(Return, taskId, task);
        
        public static InfusionOp<Unit> DeleteTask(string taskId) =>
            new InfusionOp<Unit>.DeleteTask(ReturnUnit, taskId);
        
        public static InfusionOp<Infusionsoft.Client.Task> UpdatePropertiesOnTask(string taskId, Infusionsoft.Client.Task task) =>
            new InfusionOp<Infusionsoft.Client.Task>.UpdatePropertiesOnTask(Return, taskId, task);
        
        public static InfusionOp<TransactionList> ListTransactions(string since, string until, int? limit, int? offset, long? contact_id) =>
            new InfusionOp<TransactionList>.ListTransactions(Return, since, until, limit, offset, contact_id);
        
        public static InfusionOp<Transaction> GetTransaction(long transactionId) =>
            new InfusionOp<Transaction>.GetTransaction(Return, transactionId);
        
    }
    
    public static class Interpreter
    {
        static readonly HttpClient Client = new HttpClient();
        
        public static Task<Either<InfusionDslError, T>> Interpret<T>(InfusionOp<T> op, InfusionsoftConfig config) =>
            RunAsync(op, config).ToEither();
    
        public static Task<Either<InfusionDslError, T>> Run<T>(this InfusionOp<T> op, InfusionsoftConfig config) =>
            RunAsync(op, config).ToEither();
            
        static EitherAsync<InfusionDslError, T> RunAsync<T>(InfusionOp<T> op, InfusionsoftConfig config)
        {
            var client = new InfusionsoftClient(Client, config);
            
            return 
                    op is InfusionOp<T>.Return r ? RightAsync<InfusionDslError, T>(r.Value.AsTask()) :
                    op is InfusionOp<T>.GetAccountProfile  _1 ? Execute(() => client.GetAccountProfileUsingGETAsync(),  _1.Next, client) :
                    op is InfusionOp<T>.UpdateAccountInfo  _2 ? Execute(() => client.UpdateAccountInfoUsingPUTAsync(_2.AccountInfo),  _2.Next, client) :
                    op is InfusionOp<T>.SearchCommissions  _3 ? Execute(() => client.SearchCommissionsUsingGETAsync(_3.Since, _3.Until, _3.Limit, _3.Offset, _3.AffiliateId),  _3.Next, client) :
                    op is InfusionOp<T>.RetrieveAffiliateModel  _4 ? Execute(() => client.RetrieveAffiliateModelUsingGETAsync(),  _4.Next, client) :
                    op is InfusionOp<T>.ListAppointments  _5 ? Execute(() => client.ListAppointmentsUsingGETAsync(_5.Since, _5.Until, _5.Limit, _5.Offset, _5.Contact_id),  _5.Next, client) :
                    op is InfusionOp<T>.CreateAppointment  _6 ? Execute(() => client.CreateAppointmentUsingPOSTAsync(_6.Appointment),  _6.Next, client) :
                    op is InfusionOp<T>.RetrieveAppointmentModel  _7 ? Execute(() => client.RetrieveAppointmentModelUsingGETAsync(),  _7.Next, client) :
                    op is InfusionOp<T>.GetAppointment  _8 ? Execute(() => client.GetAppointmentUsingGETAsync(_8.AppointmentId),  _8.Next, client) :
                    op is InfusionOp<T>.UpdateAppointment  _9 ? Execute(() => client.UpdateAppointmentUsingPUTAsync(_9.AppointmentId, _9.AppointmentDTO),  _9.Next, client) :
                    op is InfusionOp<T>.DeleteAppointment  _10 ? Execute(() => client.DeleteAppointmentUsingDELETEAsync(_10.AppointmentId).Lift(),  _10.Next, client) :
                    op is InfusionOp<T>.UpdatePropertiesOnAppointment  _11 ? Execute(() => client.UpdatePropertiesOnAppointmentUsingPATCHAsync(_11.AppointmentId, _11.AppointmentDTO),  _11.Next, client) :
                    op is InfusionOp<T>.ListCampaigns  _12 ? Execute(() => client.ListCampaignsUsingGETAsync(_12.Limit, _12.Offset, _12.Search_text, _12.Order, _12.Order_direction),  _12.Next, client) :
                    op is InfusionOp<T>.GetCampaign  _13 ? Execute(() => client.GetCampaignUsingGETAsync(_13.CampaignId, _13.Optional_properties),  _13.Next, client) :
                    op is InfusionOp<T>.AddContactsToCampaignSequence  _14 ? Execute(() => client.AddContactsToCampaignSequenceUsingPOSTAsync(_14.CampaignId, _14.SequenceId, _14.Ids).Lift(),  _14.Next, client) :
                    op is InfusionOp<T>.RemoveContactsFromCampaignSequence  _15 ? Execute(() => client.RemoveContactsFromCampaignSequenceUsingDELETEAsync(_15.CampaignId, _15.SequenceId, _15.Ids).Lift(),  _15.Next, client) :
                    op is InfusionOp<T>.AddContactToCampaignSequence  _16 ? Execute(() => client.AddContactToCampaignSequenceUsingPOSTAsync(_16.CampaignId, _16.SequenceId, _16.ContactId).Lift(),  _16.Next, client) :
                    op is InfusionOp<T>.RemoveContactFromCampaignSequence  _17 ? Execute(() => client.RemoveContactFromCampaignSequenceUsingDELETEAsync(_17.CampaignId, _17.SequenceId, _17.ContactId).Lift(),  _17.Next, client) :
                    op is InfusionOp<T>.ListCompanies  _18 ? Execute(() => client.ListCompaniesUsingGETAsync(_18.Limit, _18.Offset, _18.Company_name, _18.Order, _18.Order_direction, _18.Optional_properties),  _18.Next, client) :
                    op is InfusionOp<T>.CreateCompany  _19 ? Execute(() => client.CreateCompanyUsingPOSTAsync(_19.Company),  _19.Next, client) :
                    op is InfusionOp<T>.RetrieveCompanyModel  _20 ? Execute(() => client.RetrieveCompanyModelUsingGETAsync(),  _20.Next, client) :
                    op is InfusionOp<T>.ListContacts  _21 ? Execute(() => client.ListContactsUsingGETAsync(_21.Limit, _21.Offset, _21.Email, _21.Given_name, _21.Family_name, _21.Order, _21.Order_direction),  _21.Next, client) :
                    op is InfusionOp<T>.CreateContact  _22 ? Execute(() => client.CreateContactUsingPOSTAsync(_22.Contact),  _22.Next, client) :
                    op is InfusionOp<T>.CreateOrUpdateContact  _23 ? Execute(() => client.CreateOrUpdateContactUsingPUTAsync(_23.Contact),  _23.Next, client) :
                    op is InfusionOp<T>.RetrieveContactModel  _24 ? Execute(() => client.RetrieveContactModelUsingGETAsync(),  _24.Next, client) :
                    op is InfusionOp<T>.DeleteContact  _25 ? Execute(() => client.DeleteContactUsingDELETEAsync(_25.ContactId).Lift(),  _25.Next, client) :
                    op is InfusionOp<T>.UpdatePropertiesOnContact  _26 ? Execute(() => client.UpdatePropertiesOnContactUsingPATCHAsync(_26.Contact, _26.ContactId),  _26.Next, client) :
                    op is InfusionOp<T>.CreateCreditCard  _27 ? Execute(() => client.CreateCreditCardUsingPOSTAsync(_27.CreditCard, _27.ContactId),  _27.Next, client) :
                    op is InfusionOp<T>.ListEmailsForContact  _28 ? Execute(() => client.ListEmailsForContactUsingGETAsync(_28.ContactId, _28.Limit, _28.Offset, _28.Contact_id, _28.Email),  _28.Next, client) :
                    op is InfusionOp<T>.CreateEmailForContact  _29 ? Execute(() => client.CreateEmailForContactUsingPOSTAsync(_29.ContactId, _29.EmailWithContent),  _29.Next, client) :
                    op is InfusionOp<T>.ListAppliedTags  _30 ? Execute(() => client.ListAppliedTagsUsingGETAsync(_30.ContactId, _30.Limit, _30.Offset),  _30.Next, client) :
                    op is InfusionOp<T>.ApplyTagsToContactId  _31 ? Execute(() => client.ApplyTagsToContactIdUsingPOSTAsync(_31.ContactId, _31.TagIds),  _31.Next, client) :
                    op is InfusionOp<T>.RemoveTagsFromContact  _32 ? Execute(() => client.RemoveTagsFromContactUsingDELETE_1Async(_32.ContactId, _32.Ids).Lift(),  _32.Next, client) :
                    op is InfusionOp<T>.GetContact  _34 ? Execute(() => client.GetContactUsingGETAsync(_34.Id, _34.Optional_properties),  _34.Next, client) :
                    op is InfusionOp<T>.ListEmails  _35 ? Execute(() => client.ListEmailsUsingGETAsync(_35.Limit, _35.Offset, _35.Contact_id, _35.Email),  _35.Next, client) :
                    op is InfusionOp<T>.CreateEmail  _36 ? Execute(() => client.CreateEmailUsingPOSTAsync(_36.EmailWithContent),  _36.Next, client) :
                    op is InfusionOp<T>.CreateEmails  _37 ? Execute(() => client.CreateEmailsUsingPOSTAsync(_37.EmailWithContent),  _37.Next, client) :
                    op is InfusionOp<T>.DeleteEmails  _38 ? Execute(() => client.DeleteEmailsUsingPOSTAsync(_38.EmailIds),  _38.Next, client) :
                    op is InfusionOp<T>.GetEmail  _39 ? Execute(() => client.GetEmailUsingGETAsync(_39.Id),  _39.Next, client) :
                    op is InfusionOp<T>.UpdateEmail  _40 ? Execute(() => client.UpdateEmailUsingPUTAsync(_40.EmailWithContent, _40.Id),  _40.Next, client) :
                    op is InfusionOp<T>.DeleteEmail  _41 ? Execute(() => client.DeleteEmailUsingDELETEAsync(_41.Id).Lift(),  _41.Next, client) :
                    op is InfusionOp<T>.ListFiles  _42 ? Execute(() => client.ListFilesUsingGETAsync(_42.Limit, _42.Offset, _42.Viewable, _42.Permission, _42.Type, _42.Name),  _42.Next, client) :
                    op is InfusionOp<T>.CreateFile  _43 ? Execute(() => client.CreateFileUsingPOSTAsync(_43.FileUpload),  _43.Next, client) :
                    op is InfusionOp<T>.GetFile  _44 ? Execute(() => client.GetFileUsingGETAsync(_44.FileId, _44.Optional_properties),  _44.Next, client) :
                    op is InfusionOp<T>.UpdateFile  _45 ? Execute(() => client.UpdateFileUsingPUTAsync(_45.FileId, _45.FileUpload),  _45.Next, client) :
                    op is InfusionOp<T>.DeleteFile  _46 ? Execute(() => client.DeleteFileUsingDELETEAsync(_46.FileId).Lift(),  _46.Next, client) :
                    op is InfusionOp<T>.List_stored_hook_subscriptions  _47 ? Execute(() => client.List_stored_hook_subscriptionsAsync(),  _47.Next, client) :
                    op is InfusionOp<T>.Create_a_hook_subscription  _48 ? Execute(() => client.Create_a_hook_subscriptionAsync(_48.RestHookRequest),  _48.Next, client) :
                    op is InfusionOp<T>.List_hook_event_types  _49 ? Execute(() => client.List_hook_event_typesAsync(),  _49.Next, client) :
                    op is InfusionOp<T>.Retrieve_a_hook_subscription  _50 ? Execute(() => client.Retrieve_a_hook_subscriptionAsync(_50.Key),  _50.Next, client) :
                    op is InfusionOp<T>.Update_a_hook_subscription  _51 ? Execute(() => client.Update_a_hook_subscriptionAsync(_51.Key, _51.RestHookRequest),  _51.Next, client) :
                    op is InfusionOp<T>.Delete_a_hook_subscription  _52 ? Execute(() => client.Delete_a_hook_subscriptionAsync(_52.Key).Lift(),  _52.Next, client) :
                    op is InfusionOp<T>.Verify_a_hook_subscription_delayed  _53 ? Execute(() => client.Verify_a_hook_subscription_delayedAsync(_53.Key, _53.X_Hook_Secret),  _53.Next, client) :
                    op is InfusionOp<T>.Verify_a_hook_subscription  _54 ? Execute(() => client.Verify_a_hook_subscriptionAsync(_54.Key),  _54.Next, client) :
                    op is InfusionOp<T>.GetUserInfo  _55 ? Execute(() => client.GetUserInfoUsingGETAsync(),  _55.Next, client) :
                    op is InfusionOp<T>.ListOpportunities  _56 ? Execute(() => client.ListOpportunitiesUsingGETAsync(_56.Limit, _56.Offset, _56.User_id, _56.Stage_id, _56.Search_term, _56.Order),  _56.Next, client) :
                    op is InfusionOp<T>.CreateOpportunity  _57 ? Execute(() => client.CreateOpportunityUsingPOSTAsync(_57.Opportunity),  _57.Next, client) :
                    op is InfusionOp<T>.UpdateOpportunity  _58 ? Execute(() => client.UpdateOpportunityUsingPUTAsync(_58.Opportunity),  _58.Next, client) :
                    op is InfusionOp<T>.RetrieveOpportunityModel  _59 ? Execute(() => client.RetrieveOpportunityModelUsingGETAsync(),  _59.Next, client) :
                    op is InfusionOp<T>.GetOpportunity  _60 ? Execute(() => client.GetOpportunityUsingGETAsync(_60.OpportunityId, _60.Optional_properties),  _60.Next, client) :
                    op is InfusionOp<T>.UpdatePropertiesOnOpportunity  _61 ? Execute(() => client.UpdatePropertiesOnOpportunityUsingPATCHAsync(_61.OpportunityId, _61.Opportunity),  _61.Next, client) :
                    op is InfusionOp<T>.ListOpportunityStagePipelines  _62 ? Execute(() => client.ListOpportunityStagePipelinesUsingGETAsync(),  _62.Next, client) :
                    op is InfusionOp<T>.ListOrders  _63 ? Execute(() => client.ListOrdersUsingGETAsync(_63.Since, _63.Until, _63.Limit, _63.Offset, _63.Paid, _63.Order, _63.Contact_id, _63.Product_id),  _63.Next, client) :
                    op is InfusionOp<T>.RetrieveOrderModel  _64 ? Execute(() => client.RetrieveOrderModelUsingGETAsync(),  _64.Next, client) :
                    op is InfusionOp<T>.GetOrder  _65 ? Execute(() => client.GetOrderUsingGETAsync(_65.OrderId),  _65.Next, client) :
                    op is InfusionOp<T>.ListTransactionsForOrder  _66 ? Execute(() => client.ListTransactionsForOrderUsingGETAsync(_66.OrderId, _66.Since, _66.Until, _66.Limit, _66.Offset, _66.Contact_id),  _66.Next, client) :
                    op is InfusionOp<T>.ListProducts  _67 ? Execute(() => client.ListProductsUsingGETAsync(_67.Limit, _67.Offset, _67.Active),  _67.Next, client) :
                    op is InfusionOp<T>.GetProduct  _69 ? Execute(() => client.GetProductUsingGETAsync(_69.ProductId),  _69.Next, client) :
                    op is InfusionOp<T>.GetApplicationEnabled  _70 ? Execute(() => client.GetApplicationEnabledUsingGETAsync(),  _70.Next, client) :
                    op is InfusionOp<T>.GetContactOptionTypes  _71 ? Execute(() => client.GetContactOptionTypesUsingGETAsync(),  _71.Next, client) :
                    op is InfusionOp<T>.RetrieveSubscriptionModel  _72 ? Execute(() => client.RetrieveSubscriptionModelUsingGETAsync(),  _72.Next, client) :
                    op is InfusionOp<T>.ListTags  _73 ? Execute(() => client.ListTagsUsingGETAsync(_73.Limit, _73.Offset, _73.Category),  _73.Next, client) :
                    op is InfusionOp<T>.CreateTag  _74 ? Execute(() => client.CreateTagUsingPOSTAsync(_74.Tag),  _74.Next, client) :
                    op is InfusionOp<T>.CreateTagCategory  _75 ? Execute(() => client.CreateTagCategoryUsingPOSTAsync(_75.TagCategory),  _75.Next, client) :
                    op is InfusionOp<T>.GetTag  _76 ? Execute(() => client.GetTagUsingGETAsync(_76.Id),  _76.Next, client) :
                    op is InfusionOp<T>.ListContactsForTagId  _77 ? Execute(() => client.ListContactsForTagIdUsingGETAsync(_77.TagId, _77.Limit, _77.Offset),  _77.Next, client) :
                    op is InfusionOp<T>.ApplyTagToContactIds  _78 ? Execute(() => client.ApplyTagToContactIdsUsingPOSTAsync(_78.TagId, _78.Ids),  _78.Next, client) :
                    op is InfusionOp<T>.RemoveTagFromContactIds  _79 ? Execute(() => client.RemoveTagFromContactIdsUsingDELETEAsync(_79.TagId, _79.Ids).Lift(),  _79.Next, client) :
                    op is InfusionOp<T>.RemoveTagFromContactId  _80 ? Execute(() => client.RemoveTagFromContactIdUsingDELETEAsync(_80.TagId, _80.ContactId).Lift(),  _80.Next, client) :
                    op is InfusionOp<T>.ListTasks  _81 ? Execute(() => client.ListTasksUsingGETAsync(_81.Contact_id, _81.Has_due_date, _81.User_id, _81.Since, _81.Until, _81.Completed, _81.Limit, _81.Offset, _81.Order),  _81.Next, client) :
                    op is InfusionOp<T>.CreateTask  _82 ? Execute(() => client.CreateTaskUsingPOSTAsync(_82.Task),  _82.Next, client) :
                    op is InfusionOp<T>.RetrieveTaskModel  _83 ? Execute(() => client.RetrieveTaskModelUsingGETAsync(),  _83.Next, client) :
                    op is InfusionOp<T>.ListTasksForCurrentUser  _84 ? Execute(() => client.ListTasksForCurrentUserUsingGETAsync(_84.Contact_id, _84.Has_due_date, _84.User_id, _84.Since, _84.Until, _84.Completed, _84.Limit, _84.Offset, _84.Order),  _84.Next, client) :
                    op is InfusionOp<T>.GetTask  _85 ? Execute(() => client.GetTaskUsingGETAsync(_85.TaskId),  _85.Next, client) :
                    op is InfusionOp<T>.UpdateTask  _86 ? Execute(() => client.UpdateTaskUsingPUTAsync(_86.TaskId, _86.Task),  _86.Next, client) :
                    op is InfusionOp<T>.DeleteTask  _87 ? Execute(() => client.DeleteTaskUsingDELETEAsync(_87.TaskId).Lift(),  _87.Next, client) :
                    op is InfusionOp<T>.UpdatePropertiesOnTask  _88 ? Execute(() => client.UpdatePropertiesOnTaskUsingPATCHAsync(_88.TaskId, _88.Task),  _88.Next, client) :
                    op is InfusionOp<T>.ListTransactions  _89 ? Execute(() => client.ListTransactionsUsingGETAsync(_89.Since, _89.Until, _89.Limit, _89.Offset, _89.Contact_id),  _89.Next, client) :
                    op is InfusionOp<T>.GetTransaction  _90 ? Execute(() => client.GetTransactionUsingGETAsync(_90.TransactionId),  _90.Next, client) :
                    throw new NotSupportedException();
        }
    
        static EitherAsync<InfusionDslError, B> Execute<T,B>(Func<Task<T>> fn, Func<T, InfusionOp<B>> nextOp, InfusionsoftClient client) => 
            from profile in AsEither(fn)
            from next in RunAsync(nextOp(profile), client.Config)
            select next;
    
        static EitherAsync<InfusionDslError, B> Execute<B>(Func<Task<Unit>> fn, Func<InfusionOp<B>> nextOp, InfusionsoftClient client) => 
            from profile in AsEither(fn)
            from next in RunAsync(nextOp(), client.Config)
            select next;
        
        static EitherAsync<InfusionDslError, T> AsEither<T>(Func<Task<T>> fn) =>
            TryAsync(() => fn()).Match(
                Succ: t => Right<InfusionDslError, T>(t),
                Fail: e => Left<InfusionDslError, T>(InfusionDslError.New(e.Message))
            ).ToAsync();
    }        
    
    public abstract class InfusionOp<A>
    {
        internal class Return : InfusionOp<A>
        {
            public readonly A Value;
            public Return(A value) => Value = value;
        }
        
    internal class GetAccountProfile : InfusionOp<A>
        {
                        
            public Func<AccountProfile, InfusionOp<A>> Next { get; }
            
            public GetAccountProfile(Func<AccountProfile, InfusionOp<A>> next)
            {
                Next = next;
                                
            }
        }
        internal class UpdateAccountInfo : InfusionOp<A>
        {
            public AccountProfile AccountInfo { get; }
                        
            public Func<AccountProfile, InfusionOp<A>> Next { get; }
            
            public UpdateAccountInfo(Func<AccountProfile, InfusionOp<A>> next, AccountProfile accountInfo)
            {
                Next = next;
                AccountInfo = accountInfo;
                                
            }
        }
        internal class SearchCommissions : InfusionOp<A>
        {
            public string Since { get; }
            public string Until { get; }
            public int? Limit { get; }
            public int? Offset { get; }
            public long? AffiliateId { get; }
                        
            public Func<AffiliateCommissionList, InfusionOp<A>> Next { get; }
            
            public SearchCommissions(Func<AffiliateCommissionList, InfusionOp<A>> next, string since, string until, int? limit, int? offset, long? affiliateId)
            {
                Next = next;
                Since = since;
                Until = until;
                Limit = limit;
                Offset = offset;
                AffiliateId = affiliateId;
                                
            }
        }
        internal class RetrieveAffiliateModel : InfusionOp<A>
        {
                        
            public Func<ObjectModel, InfusionOp<A>> Next { get; }
            
            public RetrieveAffiliateModel(Func<ObjectModel, InfusionOp<A>> next)
            {
                Next = next;
                                
            }
        }
        internal class ListAppointments : InfusionOp<A>
        {
            public string Since { get; }
            public string Until { get; }
            public int? Limit { get; }
            public int? Offset { get; }
            public long? Contact_id { get; }
                        
            public Func<AppointmentList, InfusionOp<A>> Next { get; }
            
            public ListAppointments(Func<AppointmentList, InfusionOp<A>> next, string since, string until, int? limit, int? offset, long? contact_id)
            {
                Next = next;
                Since = since;
                Until = until;
                Limit = limit;
                Offset = offset;
                Contact_id = contact_id;
                                
            }
        }
        internal class CreateAppointment : InfusionOp<A>
        {
            public Appointment Appointment { get; }
                        
            public Func<Appointment, InfusionOp<A>> Next { get; }
            
            public CreateAppointment(Func<Appointment, InfusionOp<A>> next, Appointment appointment)
            {
                Next = next;
                Appointment = appointment;
                                
            }
        }
        internal class RetrieveAppointmentModel : InfusionOp<A>
        {
                        
            public Func<ObjectModel, InfusionOp<A>> Next { get; }
            
            public RetrieveAppointmentModel(Func<ObjectModel, InfusionOp<A>> next)
            {
                Next = next;
                                
            }
        }
        internal class GetAppointment : InfusionOp<A>
        {
            public long AppointmentId { get; }
                        
            public Func<Appointment, InfusionOp<A>> Next { get; }
            
            public GetAppointment(Func<Appointment, InfusionOp<A>> next, long appointmentId)
            {
                Next = next;
                AppointmentId = appointmentId;
                                
            }
        }
        internal class UpdateAppointment : InfusionOp<A>
        {
            public long AppointmentId { get; }
            public Appointment AppointmentDTO { get; }
                        
            public Func<Appointment, InfusionOp<A>> Next { get; }
            
            public UpdateAppointment(Func<Appointment, InfusionOp<A>> next, long appointmentId, Appointment appointmentDTO)
            {
                Next = next;
                AppointmentId = appointmentId;
                AppointmentDTO = appointmentDTO;
                                
            }
        }
        internal class DeleteAppointment : InfusionOp<A>
        {
            public long AppointmentId { get; }
                        
            public Func<InfusionOp<A>> Next { get; }
            
            public DeleteAppointment(Func<InfusionOp<A>> next, long appointmentId)
            {
                Next = next;
                AppointmentId = appointmentId;
                                
            }
        }
        internal class UpdatePropertiesOnAppointment : InfusionOp<A>
        {
            public long AppointmentId { get; }
            public Appointment AppointmentDTO { get; }
                        
            public Func<Appointment, InfusionOp<A>> Next { get; }
            
            public UpdatePropertiesOnAppointment(Func<Appointment, InfusionOp<A>> next, long appointmentId, Appointment appointmentDTO)
            {
                Next = next;
                AppointmentId = appointmentId;
                AppointmentDTO = appointmentDTO;
                                
            }
        }
        internal class ListCampaigns : InfusionOp<A>
        {
            public int? Limit { get; }
            public int? Offset { get; }
            public string Search_text { get; }
            public Order2? Order { get; }
            public Order_direction? Order_direction { get; }
                        
            public Func<CampaignList, InfusionOp<A>> Next { get; }
            
            public ListCampaigns(Func<CampaignList, InfusionOp<A>> next, int? limit, int? offset, string search_text, Order2? order, Order_direction? order_direction)
            {
                Next = next;
                Limit = limit;
                Offset = offset;
                Search_text = search_text;
                Order = order;
                Order_direction = order_direction;
                                
            }
        }
        internal class GetCampaign : InfusionOp<A>
        {
            public long CampaignId { get; }
            public LanguageExt.Lst<string> Optional_properties { get; }
                        
            public Func<Campaign, InfusionOp<A>> Next { get; }
            
            public GetCampaign(Func<Campaign, InfusionOp<A>> next, long campaignId, LanguageExt.Lst<string> optional_properties)
            {
                Next = next;
                CampaignId = campaignId;
                Optional_properties = optional_properties;
                                
            }
        }
        internal class AddContactsToCampaignSequence : InfusionOp<A>
        {
            public long CampaignId { get; }
            public long SequenceId { get; }
            public SetOfIds Ids { get; }
                        
            public Func<InfusionOp<A>> Next { get; }
            
            public AddContactsToCampaignSequence(Func<InfusionOp<A>> next, long campaignId, long sequenceId, SetOfIds ids)
            {
                Next = next;
                CampaignId = campaignId;
                SequenceId = sequenceId;
                Ids = ids;
                                
            }
        }
        internal class RemoveContactsFromCampaignSequence : InfusionOp<A>
        {
            public long CampaignId { get; }
            public long SequenceId { get; }
            public SetOfIds Ids { get; }
                        
            public Func<InfusionOp<A>> Next { get; }
            
            public RemoveContactsFromCampaignSequence(Func<InfusionOp<A>> next, long campaignId, long sequenceId, SetOfIds ids)
            {
                Next = next;
                CampaignId = campaignId;
                SequenceId = sequenceId;
                Ids = ids;
                                
            }
        }
        internal class AddContactToCampaignSequence : InfusionOp<A>
        {
            public long CampaignId { get; }
            public long SequenceId { get; }
            public long ContactId { get; }
                        
            public Func<InfusionOp<A>> Next { get; }
            
            public AddContactToCampaignSequence(Func<InfusionOp<A>> next, long campaignId, long sequenceId, long contactId)
            {
                Next = next;
                CampaignId = campaignId;
                SequenceId = sequenceId;
                ContactId = contactId;
                                
            }
        }
        internal class RemoveContactFromCampaignSequence : InfusionOp<A>
        {
            public long CampaignId { get; }
            public long SequenceId { get; }
            public long ContactId { get; }
                        
            public Func<InfusionOp<A>> Next { get; }
            
            public RemoveContactFromCampaignSequence(Func<InfusionOp<A>> next, long campaignId, long sequenceId, long contactId)
            {
                Next = next;
                CampaignId = campaignId;
                SequenceId = sequenceId;
                ContactId = contactId;
                                
            }
        }
        internal class ListCompanies : InfusionOp<A>
        {
            public int? Limit { get; }
            public int? Offset { get; }
            public string Company_name { get; }
            public Order3? Order { get; }
            public Order_direction2? Order_direction { get; }
            public LanguageExt.Lst<string> Optional_properties { get; }
                        
            public Func<CompanyList, InfusionOp<A>> Next { get; }
            
            public ListCompanies(Func<CompanyList, InfusionOp<A>> next, int? limit, int? offset, string company_name, Order3? order, Order_direction2? order_direction, LanguageExt.Lst<string> optional_properties)
            {
                Next = next;
                Limit = limit;
                Offset = offset;
                Company_name = company_name;
                Order = order;
                Order_direction = order_direction;
                Optional_properties = optional_properties;
                                
            }
        }
        internal class CreateCompany : InfusionOp<A>
        {
            public Infusionsoft.Client.CreateCompany Company { get; }
                        
            public Func<Company, InfusionOp<A>> Next { get; }
            
            public CreateCompany(Func<Company, InfusionOp<A>> next, Infusionsoft.Client.CreateCompany company)
            {
                Next = next;
                Company = company;
                                
            }
        }
        internal class RetrieveCompanyModel : InfusionOp<A>
        {
                        
            public Func<ObjectModel, InfusionOp<A>> Next { get; }
            
            public RetrieveCompanyModel(Func<ObjectModel, InfusionOp<A>> next)
            {
                Next = next;
                                
            }
        }
        internal class ListContacts : InfusionOp<A>
        {
            public int? Limit { get; }
            public int? Offset { get; }
            public string Email { get; }
            public string Given_name { get; }
            public string Family_name { get; }
            public Order4? Order { get; }
            public Order_direction3? Order_direction { get; }
                        
            public Func<ContactList, InfusionOp<A>> Next { get; }
            
            public ListContacts(Func<ContactList, InfusionOp<A>> next, int? limit, int? offset, string email, string given_name, string family_name, Order4? order, Order_direction3? order_direction)
            {
                Next = next;
                Limit = limit;
                Offset = offset;
                Email = email;
                Given_name = given_name;
                Family_name = family_name;
                Order = order;
                Order_direction = order_direction;
                                
            }
        }
        internal class CreateContact : InfusionOp<A>
        {
            public RequestContact Contact { get; }
                        
            public Func<FullContact, InfusionOp<A>> Next { get; }
            
            public CreateContact(Func<FullContact, InfusionOp<A>> next, RequestContact contact)
            {
                Next = next;
                Contact = contact;
                                
            }
        }
        internal class CreateOrUpdateContact : InfusionOp<A>
        {
            public UpsertContact Contact { get; }
                        
            public Func<FullContact, InfusionOp<A>> Next { get; }
            
            public CreateOrUpdateContact(Func<FullContact, InfusionOp<A>> next, UpsertContact contact)
            {
                Next = next;
                Contact = contact;
                                
            }
        }
        internal class RetrieveContactModel : InfusionOp<A>
        {
                        
            public Func<ObjectModel, InfusionOp<A>> Next { get; }
            
            public RetrieveContactModel(Func<ObjectModel, InfusionOp<A>> next)
            {
                Next = next;
                                
            }
        }
        internal class DeleteContact : InfusionOp<A>
        {
            public long ContactId { get; }
                        
            public Func<InfusionOp<A>> Next { get; }
            
            public DeleteContact(Func<InfusionOp<A>> next, long contactId)
            {
                Next = next;
                ContactId = contactId;
                                
            }
        }
        internal class UpdatePropertiesOnContact : InfusionOp<A>
        {
            public RequestContact Contact { get; }
            public long ContactId { get; }
                        
            public Func<FullContact, InfusionOp<A>> Next { get; }
            
            public UpdatePropertiesOnContact(Func<FullContact, InfusionOp<A>> next, RequestContact contact, long contactId)
            {
                Next = next;
                Contact = contact;
                ContactId = contactId;
                                
            }
        }
        internal class CreateCreditCard : InfusionOp<A>
        {
            public CreditCard CreditCard { get; }
            public long ContactId { get; }
                        
            public Func<CreditCardAdded, InfusionOp<A>> Next { get; }
            
            public CreateCreditCard(Func<CreditCardAdded, InfusionOp<A>> next, CreditCard creditCard, long contactId)
            {
                Next = next;
                CreditCard = creditCard;
                ContactId = contactId;
                                
            }
        }
        internal class ListEmailsForContact : InfusionOp<A>
        {
            public long ContactId { get; }
            public int? Limit { get; }
            public int? Offset { get; }
            public long? Contact_id { get; }
            public string Email { get; }
                        
            public Func<EmailSentQueryResultList, InfusionOp<A>> Next { get; }
            
            public ListEmailsForContact(Func<EmailSentQueryResultList, InfusionOp<A>> next, long contactId, int? limit, int? offset, long? contact_id, string email)
            {
                Next = next;
                ContactId = contactId;
                Limit = limit;
                Offset = offset;
                Contact_id = contact_id;
                Email = email;
                                
            }
        }
        internal class CreateEmailForContact : InfusionOp<A>
        {
            public long ContactId { get; }
            public EmailSentCreate EmailWithContent { get; }
                        
            public Func<EmailSentCreate, InfusionOp<A>> Next { get; }
            
            public CreateEmailForContact(Func<EmailSentCreate, InfusionOp<A>> next, long contactId, EmailSentCreate emailWithContent)
            {
                Next = next;
                ContactId = contactId;
                EmailWithContent = emailWithContent;
                                
            }
        }
        internal class ListAppliedTags : InfusionOp<A>
        {
            public long ContactId { get; }
            public int? Limit { get; }
            public int? Offset { get; }
                        
            public Func<ContactTagList, InfusionOp<A>> Next { get; }
            
            public ListAppliedTags(Func<ContactTagList, InfusionOp<A>> next, long contactId, int? limit, int? offset)
            {
                Next = next;
                ContactId = contactId;
                Limit = limit;
                Offset = offset;
                                
            }
        }
        internal class ApplyTagsToContactId : InfusionOp<A>
        {
            public long ContactId { get; }
            public TagId TagIds { get; }
                        
            public Func<LanguageExt.Lst<Entry_longAndString_>, InfusionOp<A>> Next { get; }
            
            public ApplyTagsToContactId(Func<LanguageExt.Lst<Entry_longAndString_>, InfusionOp<A>> next, long contactId, TagId tagIds)
            {
                Next = next;
                ContactId = contactId;
                TagIds = tagIds;
                                
            }
        }
        internal class RemoveTagsFromContact : InfusionOp<A>
        {
            public long ContactId { get; }
            public string Ids { get; }
                        
            public Func<InfusionOp<A>> Next { get; }
            
            public RemoveTagsFromContact(Func<InfusionOp<A>> next, long contactId, string ids)
            {
                Next = next;
                ContactId = contactId;
                Ids = ids;
                                
            }
        }
        internal class GetContact : InfusionOp<A>
        {
            public long Id { get; }
            public LanguageExt.Lst<string> Optional_properties { get; }
                        
            public Func<FullContact, InfusionOp<A>> Next { get; }
            
            public GetContact(Func<FullContact, InfusionOp<A>> next, long id, LanguageExt.Lst<string> optional_properties)
            {
                Next = next;
                Id = id;
                Optional_properties = optional_properties;
                                
            }
        }
        internal class ListEmails : InfusionOp<A>
        {
            public int? Limit { get; }
            public int? Offset { get; }
            public long? Contact_id { get; }
            public string Email { get; }
                        
            public Func<EmailSentQueryResultList, InfusionOp<A>> Next { get; }
            
            public ListEmails(Func<EmailSentQueryResultList, InfusionOp<A>> next, int? limit, int? offset, long? contact_id, string email)
            {
                Next = next;
                Limit = limit;
                Offset = offset;
                Contact_id = contact_id;
                Email = email;
                                
            }
        }
        internal class CreateEmail : InfusionOp<A>
        {
            public EmailSentCreate EmailWithContent { get; }
                        
            public Func<EmailSentCreate, InfusionOp<A>> Next { get; }
            
            public CreateEmail(Func<EmailSentCreate, InfusionOp<A>> next, EmailSentCreate emailWithContent)
            {
                Next = next;
                EmailWithContent = emailWithContent;
                                
            }
        }
        internal class CreateEmails : InfusionOp<A>
        {
            public EmailSentCreateList EmailWithContent { get; }
                        
            public Func<EmailSentCreateList, InfusionOp<A>> Next { get; }
            
            public CreateEmails(Func<EmailSentCreateList, InfusionOp<A>> next, EmailSentCreateList emailWithContent)
            {
                Next = next;
                EmailWithContent = emailWithContent;
                                
            }
        }
        internal class DeleteEmails : InfusionOp<A>
        {
            public SetOfIds EmailIds { get; }
                        
            public Func<LanguageExt.Map<string, string>, InfusionOp<A>> Next { get; }
            
            public DeleteEmails(Func<LanguageExt.Map<string, string>, InfusionOp<A>> next, SetOfIds emailIds)
            {
                Next = next;
                EmailIds = emailIds;
                                
            }
        }
        internal class GetEmail : InfusionOp<A>
        {
            public long Id { get; }
                        
            public Func<EmailSentQueryResultWithContent, InfusionOp<A>> Next { get; }
            
            public GetEmail(Func<EmailSentQueryResultWithContent, InfusionOp<A>> next, long id)
            {
                Next = next;
                Id = id;
                                
            }
        }
        internal class UpdateEmail : InfusionOp<A>
        {
            public EmailSentCreate EmailWithContent { get; }
            public long Id { get; }
                        
            public Func<EmailSentCreate, InfusionOp<A>> Next { get; }
            
            public UpdateEmail(Func<EmailSentCreate, InfusionOp<A>> next, EmailSentCreate emailWithContent, long id)
            {
                Next = next;
                EmailWithContent = emailWithContent;
                Id = id;
                                
            }
        }
        internal class DeleteEmail : InfusionOp<A>
        {
            public long Id { get; }
                        
            public Func<InfusionOp<A>> Next { get; }
            
            public DeleteEmail(Func<InfusionOp<A>> next, long id)
            {
                Next = next;
                Id = id;
                                
            }
        }
        internal class ListFiles : InfusionOp<A>
        {
            public int? Limit { get; }
            public int? Offset { get; }
            public Viewable? Viewable { get; }
            public Permission? Permission { get; }
            public Infusionsoft.Client.Type? Type { get; }
            public string Name { get; }
                        
            public Func<FileList, InfusionOp<A>> Next { get; }
            
            public ListFiles(Func<FileList, InfusionOp<A>> next, int? limit, int? offset, Viewable? viewable, Permission? permission, Infusionsoft.Client.Type? type, string name)
            {
                Next = next;
                Limit = limit;
                Offset = offset;
                Viewable = viewable;
                Permission = permission;
                Type = type;
                Name = name;
                                
            }
        }
        internal class CreateFile : InfusionOp<A>
        {
            public FileUpload FileUpload { get; }
                        
            public Func<FileInformation, InfusionOp<A>> Next { get; }
            
            public CreateFile(Func<FileInformation, InfusionOp<A>> next, FileUpload fileUpload)
            {
                Next = next;
                FileUpload = fileUpload;
                                
            }
        }
        internal class GetFile : InfusionOp<A>
        {
            public long FileId { get; }
            public LanguageExt.Lst<string> Optional_properties { get; }
                        
            public Func<FileInformation, InfusionOp<A>> Next { get; }
            
            public GetFile(Func<FileInformation, InfusionOp<A>> next, long fileId, LanguageExt.Lst<string> optional_properties)
            {
                Next = next;
                FileId = fileId;
                Optional_properties = optional_properties;
                                
            }
        }
        internal class UpdateFile : InfusionOp<A>
        {
            public long FileId { get; }
            public FileUpload FileUpload { get; }
                        
            public Func<FileInformation, InfusionOp<A>> Next { get; }
            
            public UpdateFile(Func<FileInformation, InfusionOp<A>> next, long fileId, FileUpload fileUpload)
            {
                Next = next;
                FileId = fileId;
                FileUpload = fileUpload;
                                
            }
        }
        internal class DeleteFile : InfusionOp<A>
        {
            public long FileId { get; }
                        
            public Func<InfusionOp<A>> Next { get; }
            
            public DeleteFile(Func<InfusionOp<A>> next, long fileId)
            {
                Next = next;
                FileId = fileId;
                                
            }
        }
        internal class List_stored_hook_subscriptions : InfusionOp<A>
        {
                        
            public Func<LanguageExt.Lst<RestHook>, InfusionOp<A>> Next { get; }
            
            public List_stored_hook_subscriptions(Func<LanguageExt.Lst<RestHook>, InfusionOp<A>> next)
            {
                Next = next;
                                
            }
        }
        internal class Create_a_hook_subscription : InfusionOp<A>
        {
            public RestHookRequest RestHookRequest { get; }
                        
            public Func<RestHook, InfusionOp<A>> Next { get; }
            
            public Create_a_hook_subscription(Func<RestHook, InfusionOp<A>> next, RestHookRequest restHookRequest)
            {
                Next = next;
                RestHookRequest = restHookRequest;
                                
            }
        }
        internal class List_hook_event_types : InfusionOp<A>
        {
                        
            public Func<LanguageExt.Lst<string>, InfusionOp<A>> Next { get; }
            
            public List_hook_event_types(Func<LanguageExt.Lst<string>, InfusionOp<A>> next)
            {
                Next = next;
                                
            }
        }
        internal class Retrieve_a_hook_subscription : InfusionOp<A>
        {
            public string Key { get; }
                        
            public Func<RestHook, InfusionOp<A>> Next { get; }
            
            public Retrieve_a_hook_subscription(Func<RestHook, InfusionOp<A>> next, string key)
            {
                Next = next;
                Key = key;
                                
            }
        }
        internal class Update_a_hook_subscription : InfusionOp<A>
        {
            public string Key { get; }
            public RestHookRequest RestHookRequest { get; }
                        
            public Func<RestHook, InfusionOp<A>> Next { get; }
            
            public Update_a_hook_subscription(Func<RestHook, InfusionOp<A>> next, string key, RestHookRequest restHookRequest)
            {
                Next = next;
                Key = key;
                RestHookRequest = restHookRequest;
                                
            }
        }
        internal class Delete_a_hook_subscription : InfusionOp<A>
        {
            public string Key { get; }
                        
            public Func<InfusionOp<A>> Next { get; }
            
            public Delete_a_hook_subscription(Func<InfusionOp<A>> next, string key)
            {
                Next = next;
                Key = key;
                                
            }
        }
        internal class Verify_a_hook_subscription_delayed : InfusionOp<A>
        {
            public string Key { get; }
            public string X_Hook_Secret { get; }
                        
            public Func<RestHook, InfusionOp<A>> Next { get; }
            
            public Verify_a_hook_subscription_delayed(Func<RestHook, InfusionOp<A>> next, string key, string x_Hook_Secret)
            {
                Next = next;
                Key = key;
                X_Hook_Secret = x_Hook_Secret;
                                
            }
        }
        internal class Verify_a_hook_subscription : InfusionOp<A>
        {
            public string Key { get; }
                        
            public Func<RestHook, InfusionOp<A>> Next { get; }
            
            public Verify_a_hook_subscription(Func<RestHook, InfusionOp<A>> next, string key)
            {
                Next = next;
                Key = key;
                                
            }
        }
        internal class GetUserInfo : InfusionOp<A>
        {
                        
            public Func<UserInfoDTO, InfusionOp<A>> Next { get; }
            
            public GetUserInfo(Func<UserInfoDTO, InfusionOp<A>> next)
            {
                Next = next;
                                
            }
        }
        internal class ListOpportunities : InfusionOp<A>
        {
            public int? Limit { get; }
            public int? Offset { get; }
            public long? User_id { get; }
            public long? Stage_id { get; }
            public string Search_term { get; }
            public Order5? Order { get; }
                        
            public Func<OpportunityList, InfusionOp<A>> Next { get; }
            
            public ListOpportunities(Func<OpportunityList, InfusionOp<A>> next, int? limit, int? offset, long? user_id, long? stage_id, string search_term, Order5? order)
            {
                Next = next;
                Limit = limit;
                Offset = offset;
                User_id = user_id;
                Stage_id = stage_id;
                Search_term = search_term;
                Order = order;
                                
            }
        }
        internal class CreateOpportunity : InfusionOp<A>
        {
            public Opportunity Opportunity { get; }
                        
            public Func<Opportunity, InfusionOp<A>> Next { get; }
            
            public CreateOpportunity(Func<Opportunity, InfusionOp<A>> next, Opportunity opportunity)
            {
                Next = next;
                Opportunity = opportunity;
                                
            }
        }
        internal class UpdateOpportunity : InfusionOp<A>
        {
            public Opportunity Opportunity { get; }
                        
            public Func<Opportunity, InfusionOp<A>> Next { get; }
            
            public UpdateOpportunity(Func<Opportunity, InfusionOp<A>> next, Opportunity opportunity)
            {
                Next = next;
                Opportunity = opportunity;
                                
            }
        }
        internal class RetrieveOpportunityModel : InfusionOp<A>
        {
                        
            public Func<ObjectModel, InfusionOp<A>> Next { get; }
            
            public RetrieveOpportunityModel(Func<ObjectModel, InfusionOp<A>> next)
            {
                Next = next;
                                
            }
        }
        internal class GetOpportunity : InfusionOp<A>
        {
            public long OpportunityId { get; }
            public LanguageExt.Lst<string> Optional_properties { get; }
                        
            public Func<Opportunity, InfusionOp<A>> Next { get; }
            
            public GetOpportunity(Func<Opportunity, InfusionOp<A>> next, long opportunityId, LanguageExt.Lst<string> optional_properties)
            {
                Next = next;
                OpportunityId = opportunityId;
                Optional_properties = optional_properties;
                                
            }
        }
        internal class UpdatePropertiesOnOpportunity : InfusionOp<A>
        {
            public long OpportunityId { get; }
            public Opportunity Opportunity { get; }
                        
            public Func<Opportunity, InfusionOp<A>> Next { get; }
            
            public UpdatePropertiesOnOpportunity(Func<Opportunity, InfusionOp<A>> next, long opportunityId, Opportunity opportunity)
            {
                Next = next;
                OpportunityId = opportunityId;
                Opportunity = opportunity;
                                
            }
        }
        internal class ListOpportunityStagePipelines : InfusionOp<A>
        {
                        
            public Func<LanguageExt.Lst<SalesPipeline>, InfusionOp<A>> Next { get; }
            
            public ListOpportunityStagePipelines(Func<LanguageExt.Lst<SalesPipeline>, InfusionOp<A>> next)
            {
                Next = next;
                                
            }
        }
        internal class ListOrders : InfusionOp<A>
        {
            public string Since { get; }
            public string Until { get; }
            public int? Limit { get; }
            public int? Offset { get; }
            public bool? Paid { get; }
            public string Order { get; }
            public long? Contact_id { get; }
            public long? Product_id { get; }
                        
            public Func<OrderList, InfusionOp<A>> Next { get; }
            
            public ListOrders(Func<OrderList, InfusionOp<A>> next, string since, string until, int? limit, int? offset, bool? paid, string order, long? contact_id, long? product_id)
            {
                Next = next;
                Since = since;
                Until = until;
                Limit = limit;
                Offset = offset;
                Paid = paid;
                Order = order;
                Contact_id = contact_id;
                Product_id = product_id;
                                
            }
        }
        internal class RetrieveOrderModel : InfusionOp<A>
        {
                        
            public Func<ObjectModel, InfusionOp<A>> Next { get; }
            
            public RetrieveOrderModel(Func<ObjectModel, InfusionOp<A>> next)
            {
                Next = next;
                                
            }
        }
        internal class GetOrder : InfusionOp<A>
        {
            public long OrderId { get; }
                        
            public Func<Order, InfusionOp<A>> Next { get; }
            
            public GetOrder(Func<Order, InfusionOp<A>> next, long orderId)
            {
                Next = next;
                OrderId = orderId;
                                
            }
        }
        internal class ListTransactionsForOrder : InfusionOp<A>
        {
            public long OrderId { get; }
            public string Since { get; }
            public string Until { get; }
            public int? Limit { get; }
            public int? Offset { get; }
            public long? Contact_id { get; }
                        
            public Func<TransactionList, InfusionOp<A>> Next { get; }
            
            public ListTransactionsForOrder(Func<TransactionList, InfusionOp<A>> next, long orderId, string since, string until, int? limit, int? offset, long? contact_id)
            {
                Next = next;
                OrderId = orderId;
                Since = since;
                Until = until;
                Limit = limit;
                Offset = offset;
                Contact_id = contact_id;
                                
            }
        }
        internal class ListProducts : InfusionOp<A>
        {
            public int? Limit { get; }
            public int? Offset { get; }
            public bool? Active { get; }
                        
            public Func<ProductList, InfusionOp<A>> Next { get; }
            
            public ListProducts(Func<ProductList, InfusionOp<A>> next, int? limit, int? offset, bool? active)
            {
                Next = next;
                Limit = limit;
                Offset = offset;
                Active = active;
                                
            }
        }
        internal class ListProductsFromSyncToken : InfusionOp<A>
        {
            public string Sync_token { get; }
            public int? Limit { get; }
            public int? Offset { get; }
                        
            public Func<ProductStatusList, InfusionOp<A>> Next { get; }
            
            public ListProductsFromSyncToken(Func<ProductStatusList, InfusionOp<A>> next, string sync_token, int? limit, int? offset)
            {
                Next = next;
                Sync_token = sync_token;
                Limit = limit;
                Offset = offset;
                                
            }
        }
        internal class GetProduct : InfusionOp<A>
        {
            public long ProductId { get; }
                        
            public Func<Product, InfusionOp<A>> Next { get; }
            
            public GetProduct(Func<Product, InfusionOp<A>> next, long productId)
            {
                Next = next;
                ProductId = productId;
                                
            }
        }
        internal class GetApplicationEnabled : InfusionOp<A>
        {
                        
            public Func<Setting, InfusionOp<A>> Next { get; }
            
            public GetApplicationEnabled(Func<Setting, InfusionOp<A>> next)
            {
                Next = next;
                                
            }
        }
        internal class GetContactOptionTypes : InfusionOp<A>
        {
                        
            public Func<Setting, InfusionOp<A>> Next { get; }
            
            public GetContactOptionTypes(Func<Setting, InfusionOp<A>> next)
            {
                Next = next;
                                
            }
        }
        internal class RetrieveSubscriptionModel : InfusionOp<A>
        {
                        
            public Func<ObjectModel, InfusionOp<A>> Next { get; }
            
            public RetrieveSubscriptionModel(Func<ObjectModel, InfusionOp<A>> next)
            {
                Next = next;
                                
            }
        }
        internal class ListTags : InfusionOp<A>
        {
            public int? Limit { get; }
            public int? Offset { get; }
            public long? Category { get; }
                        
            public Func<Tags, InfusionOp<A>> Next { get; }
            
            public ListTags(Func<Tags, InfusionOp<A>> next, int? limit, int? offset, long? category)
            {
                Next = next;
                Limit = limit;
                Offset = offset;
                Category = category;
                                
            }
        }
        internal class CreateTag : InfusionOp<A>
        {
            public Infusionsoft.Client.CreateTag Tag { get; }
                        
            public Func<Tag, InfusionOp<A>> Next { get; }
            
            public CreateTag(Func<Tag, InfusionOp<A>> next, Infusionsoft.Client.CreateTag tag)
            {
                Next = next;
                Tag = tag;
                                
            }
        }
        internal class CreateTagCategory : InfusionOp<A>
        {
            public Infusionsoft.Client.CreateTagCategory TagCategory { get; }
                        
            public Func<TagCategory, InfusionOp<A>> Next { get; }
            
            public CreateTagCategory(Func<TagCategory, InfusionOp<A>> next, Infusionsoft.Client.CreateTagCategory tagCategory)
            {
                Next = next;
                TagCategory = tagCategory;
                                
            }
        }
        internal class GetTag : InfusionOp<A>
        {
            public long Id { get; }
                        
            public Func<Tag, InfusionOp<A>> Next { get; }
            
            public GetTag(Func<Tag, InfusionOp<A>> next, long id)
            {
                Next = next;
                Id = id;
                                
            }
        }
        internal class ListContactsForTagId : InfusionOp<A>
        {
            public long TagId { get; }
            public int? Limit { get; }
            public int? Offset { get; }
                        
            public Func<TaggedContactList, InfusionOp<A>> Next { get; }
            
            public ListContactsForTagId(Func<TaggedContactList, InfusionOp<A>> next, long tagId, int? limit, int? offset)
            {
                Next = next;
                TagId = tagId;
                Limit = limit;
                Offset = offset;
                                
            }
        }
        internal class ApplyTagToContactIds : InfusionOp<A>
        {
            public long TagId { get; }
            public SetOfIds Ids { get; }
                        
            public Func<LanguageExt.Lst<Entry_longAndString_>, InfusionOp<A>> Next { get; }
            
            public ApplyTagToContactIds(Func<LanguageExt.Lst<Entry_longAndString_>, InfusionOp<A>> next, long tagId, SetOfIds ids)
            {
                Next = next;
                TagId = tagId;
                Ids = ids;
                                
            }
        }
        internal class RemoveTagFromContactIds : InfusionOp<A>
        {
            public long TagId { get; }
            public LanguageExt.Lst<long> Ids { get; }
                        
            public Func<InfusionOp<A>> Next { get; }
            
            public RemoveTagFromContactIds(Func<InfusionOp<A>> next, long tagId, LanguageExt.Lst<long> ids)
            {
                Next = next;
                TagId = tagId;
                Ids = ids;
                                
            }
        }
        internal class RemoveTagFromContactId : InfusionOp<A>
        {
            public long TagId { get; }
            public long ContactId { get; }
                        
            public Func<InfusionOp<A>> Next { get; }
            
            public RemoveTagFromContactId(Func<InfusionOp<A>> next, long tagId, long contactId)
            {
                Next = next;
                TagId = tagId;
                ContactId = contactId;
                                
            }
        }
        internal class ListTasks : InfusionOp<A>
        {
            public long? Contact_id { get; }
            public bool? Has_due_date { get; }
            public long? User_id { get; }
            public string Since { get; }
            public string Until { get; }
            public bool? Completed { get; }
            public int? Limit { get; }
            public int? Offset { get; }
            public string Order { get; }
                        
            public Func<TaskList, InfusionOp<A>> Next { get; }
            
            public ListTasks(Func<TaskList, InfusionOp<A>> next, long? contact_id, bool? has_due_date, long? user_id, string since, string until, bool? completed, int? limit, int? offset, string order)
            {
                Next = next;
                Contact_id = contact_id;
                Has_due_date = has_due_date;
                User_id = user_id;
                Since = since;
                Until = until;
                Completed = completed;
                Limit = limit;
                Offset = offset;
                Order = order;
                                
            }
        }
        internal class CreateTask : InfusionOp<A>
        {
            public Infusionsoft.Client.Task Task { get; }
                        
            public Func<Infusionsoft.Client.Task, InfusionOp<A>> Next { get; }
            
            public CreateTask(Func<Infusionsoft.Client.Task, InfusionOp<A>> next, Infusionsoft.Client.Task task)
            {
                Next = next;
                Task = task;
                                
            }
        }
        internal class RetrieveTaskModel : InfusionOp<A>
        {
                        
            public Func<ObjectModel, InfusionOp<A>> Next { get; }
            
            public RetrieveTaskModel(Func<ObjectModel, InfusionOp<A>> next)
            {
                Next = next;
                                
            }
        }
        internal class ListTasksForCurrentUser : InfusionOp<A>
        {
            public long? Contact_id { get; }
            public bool? Has_due_date { get; }
            public long? User_id { get; }
            public string Since { get; }
            public string Until { get; }
            public bool? Completed { get; }
            public int? Limit { get; }
            public int? Offset { get; }
            public string Order { get; }
                        
            public Func<TaskList, InfusionOp<A>> Next { get; }
            
            public ListTasksForCurrentUser(Func<TaskList, InfusionOp<A>> next, long? contact_id, bool? has_due_date, long? user_id, string since, string until, bool? completed, int? limit, int? offset, string order)
            {
                Next = next;
                Contact_id = contact_id;
                Has_due_date = has_due_date;
                User_id = user_id;
                Since = since;
                Until = until;
                Completed = completed;
                Limit = limit;
                Offset = offset;
                Order = order;
                                
            }
        }
        internal class GetTask : InfusionOp<A>
        {
            public string TaskId { get; }
                        
            public Func<Infusionsoft.Client.Task, InfusionOp<A>> Next { get; }
            
            public GetTask(Func<Infusionsoft.Client.Task, InfusionOp<A>> next, string taskId)
            {
                Next = next;
                TaskId = taskId;
                                
            }
        }
        internal class UpdateTask : InfusionOp<A>
        {
            public string TaskId { get; }
            public Infusionsoft.Client.Task Task { get; }
                        
            public Func<Infusionsoft.Client.Task, InfusionOp<A>> Next { get; }
            
            public UpdateTask(Func<Infusionsoft.Client.Task, InfusionOp<A>> next, string taskId, Infusionsoft.Client.Task task)
            {
                Next = next;
                TaskId = taskId;
                Task = task;
                                
            }
        }
        internal class DeleteTask : InfusionOp<A>
        {
            public string TaskId { get; }
                        
            public Func<InfusionOp<A>> Next { get; }
            
            public DeleteTask(Func<InfusionOp<A>> next, string taskId)
            {
                Next = next;
                TaskId = taskId;
                                
            }
        }
        internal class UpdatePropertiesOnTask : InfusionOp<A>
        {
            public string TaskId { get; }
            public Infusionsoft.Client.Task Task { get; }
                        
            public Func<Infusionsoft.Client.Task, InfusionOp<A>> Next { get; }
            
            public UpdatePropertiesOnTask(Func<Infusionsoft.Client.Task, InfusionOp<A>> next, string taskId, Infusionsoft.Client.Task task)
            {
                Next = next;
                TaskId = taskId;
                Task = task;
                                
            }
        }
        internal class ListTransactions : InfusionOp<A>
        {
            public string Since { get; }
            public string Until { get; }
            public int? Limit { get; }
            public int? Offset { get; }
            public long? Contact_id { get; }
                        
            public Func<TransactionList, InfusionOp<A>> Next { get; }
            
            public ListTransactions(Func<TransactionList, InfusionOp<A>> next, string since, string until, int? limit, int? offset, long? contact_id)
            {
                Next = next;
                Since = since;
                Until = until;
                Limit = limit;
                Offset = offset;
                Contact_id = contact_id;
                                
            }
        }
        internal class GetTransaction : InfusionOp<A>
        {
            public long TransactionId { get; }
                        
            public Func<Transaction, InfusionOp<A>> Next { get; }
            
            public GetTransaction(Func<Transaction, InfusionOp<A>> next, long transactionId)
            {
                Next = next;
                TransactionId = transactionId;
                                
            }
        }
        }
    
    public static class InfusionOp
    {
        static InfusionOp<B> Bind<A, B>(this InfusionOp<A> op, Func<A, InfusionOp<B>> fn) =>
            op is InfusionOp<A>.Return rt ? fn(rt.Value) :
            op is InfusionOp<A>.GetAccountProfile  _1 ? new InfusionOp<B>.GetAccountProfile(x => _1.Next(x).Bind(fn)) :  
            op is InfusionOp<A>.UpdateAccountInfo  _2 ? new InfusionOp<B>.UpdateAccountInfo(x => _2.Next(x).Bind(fn), _2.AccountInfo) :  
            op is InfusionOp<A>.SearchCommissions  _3 ? new InfusionOp<B>.SearchCommissions(x => _3.Next(x).Bind(fn), _3.Since, _3.Until, _3.Limit, _3.Offset, _3.AffiliateId) :  
            op is InfusionOp<A>.RetrieveAffiliateModel  _4 ? new InfusionOp<B>.RetrieveAffiliateModel(x => _4.Next(x).Bind(fn)) :  
            op is InfusionOp<A>.ListAppointments  _5 ? new InfusionOp<B>.ListAppointments(x => _5.Next(x).Bind(fn), _5.Since, _5.Until, _5.Limit, _5.Offset, _5.Contact_id) :  
            op is InfusionOp<A>.CreateAppointment  _6 ? new InfusionOp<B>.CreateAppointment(x => _6.Next(x).Bind(fn), _6.Appointment) :  
            op is InfusionOp<A>.RetrieveAppointmentModel  _7 ? new InfusionOp<B>.RetrieveAppointmentModel(x => _7.Next(x).Bind(fn)) :  
            op is InfusionOp<A>.GetAppointment  _8 ? new InfusionOp<B>.GetAppointment(x => _8.Next(x).Bind(fn), _8.AppointmentId) :  
            op is InfusionOp<A>.UpdateAppointment  _9 ? new InfusionOp<B>.UpdateAppointment(x => _9.Next(x).Bind(fn), _9.AppointmentId, _9.AppointmentDTO) :  
            op is InfusionOp<A>.DeleteAppointment  _10 ? new InfusionOp<B>.DeleteAppointment(() => _10.Next().Bind(fn), _10.AppointmentId) :  
            op is InfusionOp<A>.UpdatePropertiesOnAppointment  _11 ? new InfusionOp<B>.UpdatePropertiesOnAppointment(x => _11.Next(x).Bind(fn), _11.AppointmentId, _11.AppointmentDTO) :  
            op is InfusionOp<A>.ListCampaigns  _12 ? new InfusionOp<B>.ListCampaigns(x => _12.Next(x).Bind(fn), _12.Limit, _12.Offset, _12.Search_text, _12.Order, _12.Order_direction) :  
            op is InfusionOp<A>.GetCampaign  _13 ? new InfusionOp<B>.GetCampaign(x => _13.Next(x).Bind(fn), _13.CampaignId, _13.Optional_properties) :  
            op is InfusionOp<A>.AddContactsToCampaignSequence  _14 ? new InfusionOp<B>.AddContactsToCampaignSequence(() => _14.Next().Bind(fn), _14.CampaignId, _14.SequenceId, _14.Ids) :  
            op is InfusionOp<A>.RemoveContactsFromCampaignSequence  _15 ? new InfusionOp<B>.RemoveContactsFromCampaignSequence(() => _15.Next().Bind(fn), _15.CampaignId, _15.SequenceId, _15.Ids) :  
            op is InfusionOp<A>.AddContactToCampaignSequence  _16 ? new InfusionOp<B>.AddContactToCampaignSequence(() => _16.Next().Bind(fn), _16.CampaignId, _16.SequenceId, _16.ContactId) :  
            op is InfusionOp<A>.RemoveContactFromCampaignSequence  _17 ? new InfusionOp<B>.RemoveContactFromCampaignSequence(() => _17.Next().Bind(fn), _17.CampaignId, _17.SequenceId, _17.ContactId) :  
            op is InfusionOp<A>.ListCompanies  _18 ? new InfusionOp<B>.ListCompanies(x => _18.Next(x).Bind(fn), _18.Limit, _18.Offset, _18.Company_name, _18.Order, _18.Order_direction, _18.Optional_properties) :  
            op is InfusionOp<A>.CreateCompany  _19 ? new InfusionOp<B>.CreateCompany(x => _19.Next(x).Bind(fn), _19.Company) :  
            op is InfusionOp<A>.RetrieveCompanyModel  _20 ? new InfusionOp<B>.RetrieveCompanyModel(x => _20.Next(x).Bind(fn)) :  
            op is InfusionOp<A>.ListContacts  _21 ? new InfusionOp<B>.ListContacts(x => _21.Next(x).Bind(fn), _21.Limit, _21.Offset, _21.Email, _21.Given_name, _21.Family_name, _21.Order, _21.Order_direction) :  
            op is InfusionOp<A>.CreateContact  _22 ? new InfusionOp<B>.CreateContact(x => _22.Next(x).Bind(fn), _22.Contact) :  
            op is InfusionOp<A>.CreateOrUpdateContact  _23 ? new InfusionOp<B>.CreateOrUpdateContact(x => _23.Next(x).Bind(fn), _23.Contact) :  
            op is InfusionOp<A>.RetrieveContactModel  _24 ? new InfusionOp<B>.RetrieveContactModel(x => _24.Next(x).Bind(fn)) :  
            op is InfusionOp<A>.DeleteContact  _25 ? new InfusionOp<B>.DeleteContact(() => _25.Next().Bind(fn), _25.ContactId) :  
            op is InfusionOp<A>.UpdatePropertiesOnContact  _26 ? new InfusionOp<B>.UpdatePropertiesOnContact(x => _26.Next(x).Bind(fn), _26.Contact, _26.ContactId) :  
            op is InfusionOp<A>.CreateCreditCard  _27 ? new InfusionOp<B>.CreateCreditCard(x => _27.Next(x).Bind(fn), _27.CreditCard, _27.ContactId) :  
            op is InfusionOp<A>.ListEmailsForContact  _28 ? new InfusionOp<B>.ListEmailsForContact(x => _28.Next(x).Bind(fn), _28.ContactId, _28.Limit, _28.Offset, _28.Contact_id, _28.Email) :  
            op is InfusionOp<A>.CreateEmailForContact  _29 ? new InfusionOp<B>.CreateEmailForContact(x => _29.Next(x).Bind(fn), _29.ContactId, _29.EmailWithContent) :  
            op is InfusionOp<A>.ListAppliedTags  _30 ? new InfusionOp<B>.ListAppliedTags(x => _30.Next(x).Bind(fn), _30.ContactId, _30.Limit, _30.Offset) :  
            op is InfusionOp<A>.ApplyTagsToContactId  _31 ? new InfusionOp<B>.ApplyTagsToContactId(x => _31.Next(x).Bind(fn), _31.ContactId, _31.TagIds) :  
            op is InfusionOp<A>.RemoveTagsFromContact  _32 ? new InfusionOp<B>.RemoveTagsFromContact(() => _32.Next().Bind(fn), _32.ContactId, _32.Ids) :  
            op is InfusionOp<A>.GetContact  _34 ? new InfusionOp<B>.GetContact(x => _34.Next(x).Bind(fn), _34.Id, _34.Optional_properties) :  
            op is InfusionOp<A>.ListEmails  _35 ? new InfusionOp<B>.ListEmails(x => _35.Next(x).Bind(fn), _35.Limit, _35.Offset, _35.Contact_id, _35.Email) :  
            op is InfusionOp<A>.CreateEmail  _36 ? new InfusionOp<B>.CreateEmail(x => _36.Next(x).Bind(fn), _36.EmailWithContent) :  
            op is InfusionOp<A>.CreateEmails  _37 ? new InfusionOp<B>.CreateEmails(x => _37.Next(x).Bind(fn), _37.EmailWithContent) :  
            op is InfusionOp<A>.DeleteEmails  _38 ? new InfusionOp<B>.DeleteEmails(x => _38.Next(x).Bind(fn), _38.EmailIds) :  
            op is InfusionOp<A>.GetEmail  _39 ? new InfusionOp<B>.GetEmail(x => _39.Next(x).Bind(fn), _39.Id) :  
            op is InfusionOp<A>.UpdateEmail  _40 ? new InfusionOp<B>.UpdateEmail(x => _40.Next(x).Bind(fn), _40.EmailWithContent, _40.Id) :  
            op is InfusionOp<A>.DeleteEmail  _41 ? new InfusionOp<B>.DeleteEmail(() => _41.Next().Bind(fn), _41.Id) :  
            op is InfusionOp<A>.ListFiles  _42 ? new InfusionOp<B>.ListFiles(x => _42.Next(x).Bind(fn), _42.Limit, _42.Offset, _42.Viewable, _42.Permission, _42.Type, _42.Name) :  
            op is InfusionOp<A>.CreateFile  _43 ? new InfusionOp<B>.CreateFile(x => _43.Next(x).Bind(fn), _43.FileUpload) :  
            op is InfusionOp<A>.GetFile  _44 ? new InfusionOp<B>.GetFile(x => _44.Next(x).Bind(fn), _44.FileId, _44.Optional_properties) :  
            op is InfusionOp<A>.UpdateFile  _45 ? new InfusionOp<B>.UpdateFile(x => _45.Next(x).Bind(fn), _45.FileId, _45.FileUpload) :  
            op is InfusionOp<A>.DeleteFile  _46 ? new InfusionOp<B>.DeleteFile(() => _46.Next().Bind(fn), _46.FileId) :  
            op is InfusionOp<A>.List_stored_hook_subscriptions  _47 ? new InfusionOp<B>.List_stored_hook_subscriptions(x => _47.Next(x).Bind(fn)) :  
            op is InfusionOp<A>.Create_a_hook_subscription  _48 ? new InfusionOp<B>		.Create_a_hook_subscription(x => _48.Next(x).Bind(fn), _48.RestHookRequest) :  
            op is InfusionOp<A>.List_hook_event_types  _49 ? new InfusionOp<B>.List_hook_event_types(x => _49.Next(x).Bind(fn)) :  
            op is InfusionOp<A>.Retrieve_a_hook_subscription  _50 ? new InfusionOp<B>.Retrieve_a_hook_subscription(x => _50.Next(x).Bind(fn), _50.Key) :  
            op is InfusionOp<A>.Update_a_hook_subscription  _51 ? new InfusionOp<B>.Update_a_hook_subscription(x => _51.Next(x).Bind(fn), _51.Key, _51.RestHookRequest) :  
            op is InfusionOp<A>.Delete_a_hook_subscription  _52 ? new InfusionOp<B>.Delete_a_hook_subscription(() => _52.Next().Bind(fn), _52.Key) :  
            op is InfusionOp<A>.Verify_a_hook_subscription_delayed  _53 ? new InfusionOp<B>.Verify_a_hook_subscription_delayed(x => _53.Next(x).Bind(fn), _53.Key, _53.X_Hook_Secret) :  
            op is InfusionOp<A>.Verify_a_hook_subscription  _54 ? new InfusionOp<B>.Verify_a_hook_subscription(x => _54.Next(x).Bind(fn), _54.Key) :  
            op is InfusionOp<A>.GetUserInfo  _55 ? new InfusionOp<B>.GetUserInfo(x => _55.Next(x).Bind(fn)) :  
            op is InfusionOp<A>.ListOpportunities  _56 ? new InfusionOp<B>.ListOpportunities(x => _56.Next(x).Bind(fn), _56.Limit, _56.Offset, _56.User_id, _56.Stage_id, _56.Search_term, _56.Order) :  
            op is InfusionOp<A>.CreateOpportunity  _57 ? new InfusionOp<B>.CreateOpportunity(x => _57.Next(x).Bind(fn), _57.Opportunity) :  
            op is InfusionOp<A>.UpdateOpportunity  _58 ? new InfusionOp<B>.UpdateOpportunity(x => _58.Next(x).Bind(fn), _58.Opportunity) :  
            op is InfusionOp<A>.RetrieveOpportunityModel  _59 ? new InfusionOp<B>.RetrieveOpportunityModel(x => _59.Next(x).Bind(fn)) :  
            op is InfusionOp<A>.GetOpportunity  _60 ? new InfusionOp<B>.GetOpportunity(x => _60.Next(x).Bind(fn), _60.OpportunityId, _60.Optional_properties) :  
            op is InfusionOp<A>.UpdatePropertiesOnOpportunity  _61 ? new InfusionOp<B>.UpdatePropertiesOnOpportunity(x => _61.Next(x).Bind(fn), _61.OpportunityId, _61.Opportunity) :  
            op is InfusionOp<A>.ListOpportunityStagePipelines  _62 ? new InfusionOp<B>.ListOpportunityStagePipelines(x => _62.Next(x).Bind(fn)) :  
            op is InfusionOp<A>.ListOrders  _63 ? new InfusionOp<B>.ListOrders(x => _63.Next(x).Bind(fn), _63.Since, _63.Until, _63.Limit, _63.Offset, _63.Paid, _63.Order, _63.Contact_id, _63.Product_id) :  
            op is InfusionOp<A>.RetrieveOrderModel  _64 ? new InfusionOp<B>.RetrieveOrderModel(x => _64.Next(x).Bind(fn)) :  
            op is InfusionOp<A>.GetOrder  _65 ? new InfusionOp<B>.GetOrder(x => _65.Next(x).Bind(fn), _65.OrderId) :  
            op is InfusionOp<A>.ListTransactionsForOrder  _66 ? new InfusionOp<B>.ListTransactionsForOrder(x => _66.Next(x).Bind(fn), _66.OrderId, _66.Since, _66.Until, _66.Limit, _66.Offset, _66.Contact_id) :  
            op is InfusionOp<A>.ListProducts  _67 ? new InfusionOp<B>.ListProducts(x => _67.Next(x).Bind(fn), _67.Limit, _67.Offset, _67.Active) :  
            op is InfusionOp<A>.ListProductsFromSyncToken  _68 ? new InfusionOp<B>.ListProductsFromSyncToken(x => _68.Next(x).Bind(fn), _68.Sync_token, _68.Limit, _68.Offset) :  
            op is InfusionOp<A>.GetProduct  _69 ? new InfusionOp<B>.GetProduct(x => _69.Next(x).Bind(fn), _69.ProductId) :  
            op is InfusionOp<A>.GetApplicationEnabled  _70 ? new InfusionOp<B>.GetApplicationEnabled(x => _70.Next(x).Bind(fn)) :  
            op is InfusionOp<A>.GetContactOptionTypes  _71 ? new InfusionOp<B>.GetContactOptionTypes(x => _71.Next(x).Bind(fn)) :  
            op is InfusionOp<A>.RetrieveSubscriptionModel  _72 ? new InfusionOp<B>.RetrieveSubscriptionModel(x => _72.Next(x).Bind(fn)) :  
            op is InfusionOp<A>.ListTags  _73 ? new InfusionOp<B>.ListTags(x => _73.Next(x).Bind(fn), _73.Limit, _73.Offset, _73.Category) :  
            op is InfusionOp<A>.CreateTag  _74 ? new InfusionOp<B>.CreateTag(x => _74.Next(x).Bind(fn), _74.Tag) :  
            op is InfusionOp<A>.CreateTagCategory  _75 ? new InfusionOp<B>.CreateTagCategory(x => _75.Next(x).Bind(fn), _75.TagCategory) :  
            op is InfusionOp<A>.GetTag  _76 ? new InfusionOp<B>.GetTag(x => _76.Next(x).Bind(fn), _76.Id) :  
            op is InfusionOp<A>.ListContactsForTagId  _77 ? new InfusionOp<B>.ListContactsForTagId(x => _77.Next(x).Bind(fn), _77.TagId, _77.Limit, _77.Offset) :  
            op is InfusionOp<A>.ApplyTagToContactIds  _78 ? new InfusionOp<B>.ApplyTagToContactIds(x => _78.Next(x).Bind(fn), _78.TagId, _78.Ids) :  
            op is InfusionOp<A>.RemoveTagFromContactIds  _79 ? new InfusionOp<B>.RemoveTagFromContactIds(() => _79.Next().Bind(fn), _79.TagId, _79.Ids) :  
            op is InfusionOp<A>.RemoveTagFromContactId  _80 ? new InfusionOp<B>.RemoveTagFromContactId(() => _80.Next().Bind(fn), _80.TagId, _80.ContactId) :  
            op is InfusionOp<A>.ListTasks  _81 ? new InfusionOp<B>.ListTasks(x => _81.Next(x).Bind(fn), _81.Contact_id, _81.Has_due_date, _81.User_id, _81.Since, _81.Until, _81.Completed, _81.Limit, _81.Offset, _81.Order) :  
            op is InfusionOp<A>.CreateTask  _82 ? new InfusionOp<B>.CreateTask(x => _82.Next(x).Bind(fn), _82.Task) :  
            op is InfusionOp<A>.RetrieveTaskModel  _83 ? new InfusionOp<B>.RetrieveTaskModel(x => _83.Next(x).Bind(fn)) :  
            op is InfusionOp<A>.ListTasksForCurrentUser  _84 ? new InfusionOp<B>.ListTasksForCurrentUser(x => _84.Next(x).Bind(fn), _84.Contact_id, _84.Has_due_date, _84.User_id, _84.Since, _84.Until, _84.Completed, _84.Limit, _84.Offset, _84.Order) :  
            op is InfusionOp<A>.GetTask  _85 ? new InfusionOp<B>.GetTask(x => _85.Next(x).Bind(fn), _85.TaskId) :  
            op is InfusionOp<A>.UpdateTask  _86 ? new InfusionOp<B>.UpdateTask(x => _86.Next(x).Bind(fn), _86.TaskId, _86.Task) :  
            op is InfusionOp<A>.DeleteTask  _87 ? new InfusionOp<B>.DeleteTask(() => _87.Next().Bind(fn), _87.TaskId) :  
            op is InfusionOp<A>.UpdatePropertiesOnTask  _88 ? new InfusionOp<B>.UpdatePropertiesOnTask(x => _88.Next(x).Bind(fn), _88.TaskId, _88.Task) :  
            op is InfusionOp<A>.ListTransactions  _89 ? new InfusionOp<B>.ListTransactions(x => _89.Next(x).Bind(fn), _89.Since, _89.Until, _89.Limit, _89.Offset, _89.Contact_id) :  
            op is InfusionOp<A>.GetTransaction  _90 ? new InfusionOp<B>.GetTransaction(x => _90.Next(x).Bind(fn), _90.TransactionId) as InfusionOp<B>  :  
            throw new NotSupportedException();
    
        public static InfusionOp<B> Map<A, B>(this InfusionOp<A> op, Func<A, B> fn) =>
            op.Bind(a => InfusionDsl.Return(fn(a)));
    
        public static InfusionOp<B> Select<A, B>(this InfusionOp<A> op, Func<A, B> fn) =>
            op.Bind(a => InfusionDsl.Return(fn(a)));
    
        public static InfusionOp<C> SelectMany<A, B, C>(this InfusionOp<A> op, Func<A, InfusionOp<B>> bind, Func<A, B, C> project) =>
            op.Bind(a => bind(a).Select(b => project(a, b)));
    }
    
}